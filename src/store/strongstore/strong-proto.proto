syntax = "proto2";

import "store/common/common-proto.proto";

package strongstore.proto;

message RequestIDMessage {
    required uint64 client_id = 1;
    required uint64 client_req_id = 2;
}

message Get {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required string key = 3;
    optional TimestampMessage timestamp = 4;
}

message GetReply {
    required RequestIDMessage rid = 1;
    required TimestampMessage timestamp = 2;
    required string key = 3;
    required string val = 4;
}

message RWCommitCoordinator {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required TransactionMessage transaction = 3;
    required int32 n_participants = 4;
}

message RWCommitCoordinatorReply {
    required RequestIDMessage rid = 1;
    required int32 status = 2;
    required uint64 commit_timestamp = 3;
}

message RWCommitParticipant {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required TransactionMessage transaction = 3;
    required int32 coordinator_shard = 4;
}

message RWCommitParticipantReply {
    required RequestIDMessage rid = 1;
    required int32 status = 2;
}

message PrepareOK {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required int32 participant_shard = 3;
    required uint64 prepare_timestamp = 4;
}

message PrepareOKReply {
    required RequestIDMessage rid = 1;
    required int32 status = 2;
    required uint64 commit_timestamp = 3;
}

message PrepareAbort {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required int32 participant_shard = 3;
}

message PrepareAbortReply {
    required RequestIDMessage rid = 1;
    required int32 status = 2;
}

message ROCommit {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    required uint64 commit_timestamp = 3;
    repeated string keys = 4;
}

message ReadReply {
    required TimestampMessage timestamp = 1;
    required string val = 2;
}

message ROCommitReply {
    required RequestIDMessage rid = 1;
    required uint64 transaction_id = 2;
    repeated ReadReply values = 3;
}

message PrepareMessage {
    required TransactionMessage txn = 1;
    optional uint64 timestamp = 2;
}

message CommitMessage {
    required uint64 timestamp = 1;
    optional TransactionMessage transaction = 2;
}

message Request {
     enum Operation {
          PREPARE = 1;
          COMMIT = 2;
          ABORT = 3;
     }	
     required Operation op = 1;
     required uint64 txnid = 2;
     optional PrepareMessage prepare = 3;
     optional CommitMessage commit = 4;
}

message Reply {
     // 0 = OK
     // -1 = failed
     // -2 = retry
     // -3 = abstain/no reply
     required int32 status = 1;
     optional string value = 2;
     optional uint64 timestamp = 3;
     repeated uint64 notify_ros = 4;
}
